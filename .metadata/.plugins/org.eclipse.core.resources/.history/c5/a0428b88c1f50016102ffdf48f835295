
public class Solution {

	static int max = 0;
	private static void findPeak(int[][] matrix, int x, int y, int row, int col) {
		
		int cur = matrix[x][y];
		
		if(x>=0 && y>=0 && x<=row-1 && y<=col-1 ){
			if(matrix[x][y]>max)
				max = matrix[x][y];
			
			if(x+1<row ){
				if( (matrix[x+1][y]==cur+1)||(matrix[x+1][y]==cur-1)){
					findPeak(matrix, x+1, y, row, col);
				}
			}
			if (y+1<col){
				if((matrix[x][y+1]==cur+1)||(matrix[x][y+1]==cur-1)){
					findPeak(matrix, x, y+1, row, col);
					}
			}
			/*if(x-1>=0){
				if((matrix[x-1][y]==cur+1)||(matrix[x-1][y]==cur-1)){
					findPeak(matrix, x-1, y, row, col);
				}
			}
			if(y-1>=0){
				if((matrix[x][y-1]==cur+1)||(matrix[x][y-1]==cur-1)){
					findPeak(matrix, x, y-1, row, col);
				}
			}*/
		}
	}
	
	public static void main(String[] args) {
		int[][] matrix = {
				 {6, 0, 1, 5},
			   	 {5, 5, 2, 4},
				 {4, 3, 2, 3},
			};
		
		int row = matrix.length;
		int col = matrix[0].length;
		
		findPeak(matrix,0,0,row,col);
		System.out.println(max);
		/*int[][] matrix = {
				 {0, 0, 1, 5},
			   	 {5, 5, 2, 4},
				 {5, 3, 3, 3},
				 {5, 4, 3, 3},
				 {5, 6, 4, 3},
				 {6, 2, 5, 3},

		};
*/
		//{5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6}	{0,0}
		//
	}

}
